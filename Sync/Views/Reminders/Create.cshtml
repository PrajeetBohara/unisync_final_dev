@model Sync.Models.Reminder
@{
    ViewData["Title"] = "Create Reminder";
    var categories = ViewBag.Categories as List<Sync.Models.Category>;
}
<h1>Create a New Reminder</h1>
<form asp-action="Create" method="post">
    <div class="mb-3">
        <label asp-for="Title" class="form-label"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label asp-for="Description" class="form-label"></label>
<textarea asp-for="Description" class="form-control"></textarea>
    </div>
    <div class="mb-3">
        <label asp-for="DueDate" class="form-label">Due Date</label>
        <input asp-for="DueDate" class="form-control" type="datetime-local" />
        <span asp-validation-for="DueDate" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label class="form-label">Category</label>
        <select asp-for="CategoryId" class="form-select"
                asp-items="@(new SelectList(categories, "Id", "Name"))">
        </select>
        <span asp-validation-for="CategoryId" class="text-danger"></span>
    </div>
    <button type="submit" class="btn btn-success">Create</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>
@section Scripts {
    <!-- Validation script (if not already included via layout) -->
    <partial name="_ValidationScriptsPartial" />
}




@*         // POST: /Reminders/Create
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult>
    Create(Reminder reminder)
    {
    if (ModelState.IsValid)
    {
    _context.Add(reminder);
    await _context.SaveChangesAsync();
    // On normal form submission, redirect back to list
    return RedirectToAction(nameof(Index));
    }
    // If validation failed, re-show form with current data and categories
    ViewBag.Categories = _context.Categories.ToList();
    return View(reminder);
    } *@
